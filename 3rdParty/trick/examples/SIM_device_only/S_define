#include "sim_objects/default_trick_sys.sm"
#include "idf/IdfInputDeviceManager.sm"

##include <sstream>
##include <iomanip>

##include "idf/UsbExtreme3dPro.hh"

/**
 * Demonstrates the use of IDF within a Trick simulation, using only the
 * hardware interface layer to read data from a physical device.
 */
class Example : public IdfInputDeviceManager {

    public:

    /**
     * In this example, we're requiring a specific device. IDF maintains a list
     * of identifying properties for each supported device so it can locate them
     * within the USB network. If you have a different generation Logitech
     * Extreme 3D Pro, its properties may not be in IDF yet, in which case you
     * can use UsbDevice::addIdentification to add support for it.
     */
    idf::UsbExtreme3dPro device;

    Example() :
        /**
         * Call the base class constructor, specifying the period at which the
         * updateDevices() job will be called. You can optionally specify the
         * phase and class for this job as well. See IdfInputDeviceManager.sm
         * for details.
         */
        IdfInputDeviceManager(0.1) {

        /**
         * Adding a device causes the IdfInputDeviceManager to automatically:
         * 1. Open the device during sim initialization.
         * 2. Update the device when the sim is running.
         * 3. Close the device when the sim shuts down.
         */
        add(device);
    }

    /**
     * If you want to perform some action after all devices have been updated,
     * one possibility is overriding IdfInputDeviceManager's updateDevices()
     * function. In this example, we just want to print the device's decoded
     * normalized values to the console. Normalized values always fall in the
     * range [-1, 1], with the extremes corresponing to the minimum and maximum
     * raw values. 0 represents the "neutral" point. If you choose this method,
     * be sure to call the base class version of the function or the devices
     * will never be updated!
     *
     * Another option is to just declare another scheduled job and do your post-
     * update logic there. This can be useful if you want the updateDevices()
     * job and your post-update logic to run at different rates or have
     * different phases or job classes.
     */
    void updateDevices() {

        // Don't forget to call the base class version!
        IdfInputDeviceManager::updateDevices();

        // Print the values.
        std::cout << std::showpos << std::fixed << std::setprecision(2)

                  << device.forwardBackwardPivot.getNormalizedValue() << " "
                  << device.leftRightPivot.getNormalizedValue()       << " "
                  << device.twist.getNormalizedValue()                << " "
                  << device.trigger.getNormalizedValue()              << " "
                  << device.button2.getNormalizedValue()              << " "
                  << device.button3.getNormalizedValue()              << " "
                  << device.button4.getNormalizedValue()              << " "
                  << device.button5.getNormalizedValue()              << " "
                  << device.button6.getNormalizedValue()              << " "
                  << device.button7.getNormalizedValue()              << " "
                  << device.button8.getNormalizedValue()              << " "
                  << device.button9.getNormalizedValue()              << " "
                  << device.button10.getNormalizedValue()             << " "
                  << device.button11.getNormalizedValue()             << " "
                  << device.button12.getNormalizedValue()             << " "
                  << device.hatNorth.getNormalizedValue()             << " "
                  << device.hatNorthEast.getNormalizedValue()         << " "
                  << device.hatEast.getNormalizedValue()              << " "
                  << device.hatSouthEast.getNormalizedValue()         << " "
                  << device.hatSouth.getNormalizedValue()             << " "
                  << device.hatSouthWest.getNormalizedValue()         << " "
                  << device.hatWest.getNormalizedValue()              << " "
                  << device.hatNorthWest.getNormalizedValue()         << " "
                  << device.slider.getNormalizedValue()               << " "

                  << std::endl;
    }

    private:

    /**
     * It is necessary to make this function private because Extreme3dPro's
     * assignment operator is private, and the default implementation of this
     * function would try to assign to the variable "device", resulting in a
     * compilation-time privacy error when SWIG tries to wrap this class.
     */
    void operator =(const Example&);

};

Example example;
